{"name":"DamageModelComponent","base":"Component","fields":[{"offset":72,"comment":"hit points at the moment","example_range_min":0,"example_range_max":4,"kind":"Members","default_value":"1","size":8,"raw_type":"double","type":"double","name":"hp"},{"offset":80,"comment":"the maximum hp that this can have, we'll set this when loading","example_range_min":0,"example_range_max":4,"kind":"Members","default_value":"0","size":8,"raw_type":"double","type":"double","name":"max_hp"},{"offset":88,"comment":"the maximum 'max_hp' that this can have, <= 0 means no limits. Used by perks such as GLASS_CANNON","example_range_min":0,"example_range_max":12,"kind":"Members","default_value":"0","size":8,"raw_type":"double","type":"double","name":"max_hp_cap"},{"offset":96,"comment":"used for UI rendering","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"0","size":8,"raw_type":"double","type":"double","name":"max_hp_old"},{"offset":104,"comment":"the multipliers applied to different types of damage","example_range_min":0,"example_range_max":1,"kind":"Objects","default_value":"","size":64,"raw_type":"ConfigDamagesByType","type":"ConfigDamagesByType","name":"damage_multipliers"},{"offset":168,"comment":"0.0 = all critical damage multiplier is applied. 1.0 = no critical damage multiplier is applied","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"0","size":4,"raw_type":"float","type":"float","name":"critical_damage_resistance"},{"offset":172,"comment":"if positive, doesn't take damage","example_range_min":0,"example_range_max":1024,"kind":"Members","default_value":"0","size":4,"raw_type":"int","type":"int","name":"invincibility_frames"},{"offset":176,"comment":"do we take fall damage","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"true","size":1,"raw_type":"bool","type":"bool","name":"falling_damages"},{"offset":180,"comment":"how far do we need to fall to take damage, we start with this height, the peasant takes min damage from this","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"70","size":4,"raw_type":"float","type":"float","name":"falling_damage_height_min"},{"offset":184,"comment":"after this the peasant always takes the maximum fall damage","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"250","size":4,"raw_type":"float","type":"float","name":"falling_damage_height_max"},{"offset":188,"comment":"when we fall over height_min we take this much, lineary ramping to damage_max","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"0.1","size":4,"raw_type":"float","type":"float","name":"falling_damage_damage_min"},{"offset":192,"comment":"when we fall over height_min we take this much, lineary ramping to damage_max","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"1.2","size":4,"raw_type":"float","type":"float","name":"falling_damage_damage_max"},{"offset":196,"comment":"Do we breath, can we take damage from not breathing?","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"true","size":1,"raw_type":"bool","type":"bool","name":"air_needed"},{"offset":200,"comment":"How much air do we have in our lungs? - after the air runs out we take damage","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"5","size":4,"raw_type":"float","type":"float","name":"air_in_lungs"},{"offset":204,"comment":"how much air can we have in our lungs, it's filled to this point if we're not in water","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"5","size":4,"raw_type":"float","type":"float","name":"air_in_lungs_max"},{"offset":208,"comment":"(* dt)... damage in a second if we're in the water","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"0.2","size":4,"raw_type":"float","type":"float","name":"air_lack_of_damage"},{"offset":212,"comment":"Minimum knockback force required to do the knockback","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"0","size":4,"raw_type":"float","type":"float","name":"minimum_knockback_force"},{"offset":216,"comment":"should materials do damage or not?","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"true","size":1,"raw_type":"bool","type":"bool","name":"materials_damage"},{"offset":220,"comment":"if material damage is received from less than 'material_damage_min_cell_count' this frame, it is ignored","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"4","size":4,"raw_type":"int","type":"int","name":"material_damage_min_cell_count"},{"offset":224,"comment":"list of materials that do damage, separated by ',' e.g. 'acid, fire, smoke'","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"acid","size":24,"raw_type":"std::string","type":"std::string","name":"materials_that_damage"},{"offset":248,"comment":"list of damage amount per material in materials_that_damage, separated by ','","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"0.1","size":24,"raw_type":"std::string","type":"std::string","name":"materials_how_much_damage"},{"offset":272,"comment":"if damage from materials is proportional to max hp, instead of just damage","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"materials_damage_proportional_to_maxhp"},{"offset":273,"comment":"if true, will take damage from physics objects that hit it","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"physics_objects_damage"},{"offset":274,"comment":"should collisions with certain materials create messages or not?","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"materials_create_messages"},{"offset":276,"comment":"list of materials that generate CollisionWithCell messages, separated by ',' e.g. 'acid, fire, smoke'","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"meat","size":24,"raw_type":"std::string","type":"std::string","name":"materials_that_create_messages"},{"offset":300,"comment":"the file from which to load a ragdoll on death'","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"data/temp/ragdoll/filenames.txt","size":24,"raw_type":"std::string","type":"std::string","name":"ragdoll_filenames_file"},{"offset":324,"comment":"what material is the ragdoll made out of","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"meat","size":24,"raw_type":"std::string","type":"std::string","name":"ragdoll_material"},{"offset":348,"comment":"where should the ragdoll be created relative to our entity position'","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"0","size":4,"raw_type":"float","type":"float","name":"ragdoll_offset_x"},{"offset":352,"comment":"where should the ragdoll be created relative to our entity position'","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"0","size":4,"raw_type":"float","type":"float","name":"ragdoll_offset_y"},{"offset":356,"comment":"if set, will force this ragdoll fx to happen everytime","example_range_min":0,"example_range_max":1,"kind":"Custom data types","default_value":"NONE","size":4,"raw_type":"RAGDOLL_FX::Enum","type":"RAGDOLL_FX::Enum","name":"ragdoll_fx_forced"},{"offset":360,"comment":"this is the material that gets thrown as particles when this entity takes damage","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"blood_fading","size":24,"raw_type":"std::string","type":"std::string","name":"blood_material"},{"offset":384,"comment":"this is the material that gets thrown as particles when this entity sprays blood on death","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"","size":24,"raw_type":"std::string","type":"std::string","name":"blood_spray_material"},{"offset":408,"comment":"if true, we force some blood spray particles to be cosmetic (can be enabled to avoid making a huge mess of blood spray)","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"blood_spray_create_some_cosmetic"},{"offset":412,"comment":"how much blood, this is the multiplier used for sprouting lots or little blood","example_range_min":0,"example_range_max":10,"kind":"Members","default_value":"1","size":4,"raw_type":"float","type":"float","name":"blood_multiplier"},{"offset":416,"comment":"if > -1, this is the absolute amount of blood we share between particle emitters in the ragdoll","example_range_min":-1,"example_range_max":1000,"kind":"Members","default_value":"-1","size":4,"raw_type":"int","type":"int","name":"ragdoll_blood_amount_absolute"},{"offset":420,"comment":"this sprite is loaded at damage position if we take damage that creates a blood effect","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"","size":24,"raw_type":"std::string","type":"std::string","name":"blood_sprite_directional"},{"offset":444,"comment":"this sprite is loaded at damage position if we take explosion/heavy damage","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"","size":24,"raw_type":"std::string","type":"std::string","name":"blood_sprite_large"},{"offset":468,"comment":"if this is set, will load this entity as a child of this entity, when this entity is healed","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"","size":24,"raw_type":"std::string","type":"std::string","name":"healing_particle_effect_entity"},{"offset":492,"comment":"if 0, we skip ragdoll creation on death","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"true","size":1,"raw_type":"bool","type":"bool","name":"create_ragdoll"},{"offset":493,"comment":"if 1, we ragdollify child entity sprites","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"ragdollify_child_entity_sprites"},{"offset":496,"comment":"If ragdoll_filenames_file= and > 0, the angular damping of the first ragdoll body is set to this value.","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"0","size":4,"raw_type":"float","type":"float","name":"ragdollify_root_angular_damping"},{"offset":500,"comment":"If ragdoll_filenames_file= and true, all but the first sprite on the root entity will be disintegrated instead of being turned into physics bodies.","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"ragdollify_disintegrate_nonroot"},{"offset":501,"comment":"if 1, we wont kill the entity along with kill fx and ragdoll until 'kill' is 1","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"wait_for_kill_flag_on_death"},{"offset":502,"comment":"if 1, we wont kill the entity along with kill fx and ragdoll until 'kill_now' is 1","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"kill_now"},{"offset":503,"comment":"drop the abilities as items on death?","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"true","size":1,"raw_type":"bool","type":"bool","name":"drop_items_on_death"},{"offset":504,"comment":"If 1, damage numbers are displayed when this entity is damaged","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"true","size":1,"raw_type":"bool","type":"bool","name":"ui_report_damage"},{"offset":505,"comment":"If 1, damage numbers are displayed when this entity is damaged, even if the numbers are disabled in settings","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"ui_force_report_damage"},{"offset":508,"comment":"when shooting underwater how likely are we to electrify the water","example_range_min":0,"example_range_max":100,"kind":"Members","default_value":"0","size":4,"raw_type":"int","type":"int","name":"in_liquid_shooting_electrify_prob"},{"offset":512,"comment":"how much damage per 10 frames is done if entity has 'wet' status effect","example_range_min":0,"example_range_max":0.1,"kind":"Members","default_value":"0","size":4,"raw_type":"float","type":"float","name":"wet_status_effect_damage"},{"offset":516,"comment":"Tells us we're on fire or not","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"is_on_fire"},{"offset":520,"comment":"what is the probability that we'll ignite, 0 means won't ever ignite","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"0.5","size":4,"raw_type":"float","type":"float","name":"fire_probability_of_ignition"},{"offset":524,"comment":"how many fire particles do we generate each frame","example_range_min":0,"example_range_max":10,"kind":"Members","default_value":"4","size":4,"raw_type":"int","type":"int","name":"fire_how_much_fire_generates"},{"offset":528,"comment":"how much damage does being ignited do?","example_range_min":0,"example_range_max":2,"kind":"Members","default_value":"0.0003","size":4,"raw_type":"float","type":"float","name":"fire_damage_ignited_amount"},{"offset":532,"comment":"how much damage does fire do?, 0.2 is pretty good","example_range_min":0,"example_range_max":2,"kind":"Members","default_value":"0.2","size":4,"raw_type":"float","type":"float","name":"fire_damage_amount"},{"offset":536,"comment":"private variable to check when we're on fire and not","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"mIsOnFire"},{"offset":540,"comment":"this gets decreased if we can't ignite anything else","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"100","size":4,"raw_type":"int","type":"int","name":"mFireProbability"},{"offset":544,"comment":"this is the remaining frames we're on fire","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"0","size":4,"raw_type":"int","type":"int","name":"mFireFramesLeft"},{"offset":548,"comment":"this is the total duration in frames we're on fire","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"0","size":4,"raw_type":"int","type":"int","name":"mFireDurationFrames"},{"offset":552,"comment":"private variable to check when we could have been ignited or not","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"mFireTriedIgniting"},{"offset":556,"comment":"an optimization, so we don't have to check everything every frame","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"0","size":4,"raw_type":"int","type":"int","name":"mLastCheckX"},{"offset":560,"comment":"an optimization, so we don't have to check everything every frame","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"0","size":4,"raw_type":"int","type":"int","name":"mLastCheckY"},{"offset":564,"comment":"an optimization, so we don't have to check everything every frame","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"0","size":4,"raw_type":"int","type":"int","name":"mLastCheckTime"},{"offset":568,"comment":"this is the last frame we took material damage","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"0","size":4,"raw_type":"int","type":"int","name":"mLastMaterialDamageFrame"},{"offset":572,"comment":"for fall damage, keeps a private variable about if we're on ground or not","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"mFallIsOnGround"},{"offset":576,"comment":"private var to keep track of how high have we flown to","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"3.40282e+038","size":4,"raw_type":"float","type":"float","name":"mFallHighestY"},{"offset":580,"comment":"how many times have we fallen? This is used to make sure we don't take damage from the first fall","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"0","size":4,"raw_type":"int","type":"int","name":"mFallCount"},{"offset":584,"comment":"a private variable to track our state in drowning","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"mAirAreWeInWater"},{"offset":588,"comment":"how many frames have been with air to breathe","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"0","size":4,"raw_type":"int","type":"int","name":"mAirFramesNotInWater"},{"offset":592,"comment":"a private variable to track our state in drowning","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"mAirDoWeHave"},{"offset":596,"comment":"how many cells are there total","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"0","size":4,"raw_type":"int","type":"int","name":"mTotalCells"},{"offset":600,"comment":"how many of the cells are liquid","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"0","size":4,"raw_type":"int","type":"int","name":"mLiquidCount"},{"offset":604,"comment":"stores the liquid material we're in... may not be the most accurate","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"-1","size":4,"raw_type":"int","type":"int","name":"mLiquidMaterialWeAreIn"},{"offset":608,"comment":"NOTE! Sorted! a list of materials that do damage (materials_that_damage)","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"","size":12,"raw_type":"std::vector< int >","type":"std::vector<int>","name":"mDamageMaterials"},{"offset":620,"comment":"NOTE! Sorted! a list of materials that do damage (materials_that_damage)","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"","size":12,"raw_type":"std::vector< float >","type":"std::vector<float>","name":"mDamageMaterialsHowMuch"},{"offset":632,"comment":"NOTE! Sorted! a list of materials that create messages (materials_that_create_messages)","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"","size":12,"raw_type":"std::vector< int >","type":"std::vector<int>","name":"mCollisionMessageMaterials"},{"offset":644,"comment":"Number of cells per collided with this frame. Order matches mCollisionMessageMaterials","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"","size":12,"raw_type":"std::vector< int >","type":"std::vector<int>","name":"mCollisionMessageMaterialCountsThisFrame"},{"offset":656,"comment":"A list of damage per material that damages us. In same order as materials","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"","size":12,"raw_type":"std::vector< float >","type":"std::vector<float>","name":"mMaterialDamageThisFrame"},{"offset":668,"comment":"Amount of fall damage received this frame","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"0","size":4,"raw_type":"float","type":"float","name":"mFallDamageThisFrame"},{"offset":672,"comment":"Amount of electricity damage received this frame","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"0","size":4,"raw_type":"float","type":"float","name":"mElectricityDamageThisFrame"},{"offset":676,"comment":"max physics damage we have taken this round","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"0","size":4,"raw_type":"float","type":"float","name":"mPhysicsDamageThisFrame"},{"offset":680,"comment":"direction of physics damage","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"(0, 0)","size":8,"raw_type":"vec2","type":"vec2","name":"mPhysicsDamageVecThisFrame"},{"offset":688,"comment":"frame number when we took physics damage","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"0","size":4,"raw_type":"int","type":"int","name":"mPhysicsDamageLastFrame"},{"offset":692,"comment":"the physics entity that hit us","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"","size":4,"raw_type":"EntityTypeID","type":"EntityTypeID","name":"mPhysicsDamageEntity"},{"offset":696,"comment":"who moved an object that hit us via telekinesis","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"","size":4,"raw_type":"EntityTypeID","type":"EntityTypeID","name":"mPhysicsDamageTelekinesisCasterEntity"},{"offset":700,"comment":"frame number when we took any damage","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"-120","size":4,"raw_type":"int","type":"int","name":"mLastDamageFrame"},{"offset":704,"comment":"how much hp did we have a while ago?","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"0","size":8,"raw_type":"double","type":"double","name":"mHpBeforeLastDamage"},{"offset":712,"comment":"Last frame electricity has no effect. Should not be private!","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"-2147483648","size":4,"raw_type":"int","type":"int","name":"mLastElectricityResistanceFrame"},{"offset":716,"comment":"Last frame a damage block message was displayed for this entity","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"-2147483648","size":4,"raw_type":"int","type":"int","name":"mLastFrameReportedBlock"},{"offset":720,"comment":"used for UI rendering","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"-10000","size":4,"raw_type":"int","type":"int","name":"mLastMaxHpChangeFrame"},{"offset":724,"comment":"used to optimized cases where lots of entities are taking fire damage","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"0","size":4,"raw_type":"float","type":"float","name":"mFireDamageBuffered"},{"offset":728,"comment":"","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"0","size":4,"raw_type":"int32","type":"std::int32_t","name":"mFireDamageBufferedNextDeliveryFrame"}]}