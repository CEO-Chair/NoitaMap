{"name":"VegetationComponent","base":"ceng::IConfigBase","fields":[{"offset":4,"comment":"the type of the tree. If is_visual=0 will insert the pixels into the world as cells. is_visual=1 will add a single cell and attach an image to that particle","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"is_visual"},{"offset":5,"comment":"if true will create the actual pixels into the world of the material given","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"is_real_pixels"},{"offset":6,"comment":"if set will treat this as grass and lay it on surfaces defined in material_on_top_of ( if not set will put it ontop of everything). ","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"is_grass"},{"offset":7,"comment":"","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"is_ceiling_plant"},{"offset":8,"comment":"if set, will check the 4 corners for safty","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"check_safety"},{"offset":12,"comment":"uses this to randomize the positions","example_range_min":0,"example_range_max":10000,"kind":"Members","default_value":"1234","size":4,"raw_type":"float","type":"float","name":"rand_seed"},{"offset":16,"comment":"partitions the space into tree_width lengths each partion might have a tree","example_range_min":0,"example_range_max":512,"kind":"Members","default_value":"120","size":4,"raw_type":"float","type":"float","name":"tree_width"},{"offset":20,"comment":"within the tree width what's the min distance it can spawn in (0) all the way to the left","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"0.3","size":4,"raw_type":"float","type":"float","name":"tree_radius_low"},{"offset":24,"comment":"within the tree width what's the max distance (1) all the way to right","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"0.7","size":4,"raw_type":"float","type":"float","name":"tree_radius_high"},{"offset":28,"comment":"what's the probability of a tree being spawned in a tree_width section","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"0.7","size":4,"raw_type":"float","type":"float","name":"tree_probability"},{"offset":32,"comment":"if true, the tree is spawned only 1/3 of cases","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"is_rare"},{"offset":36,"comment":"if is_visual is true, then this will move it down by this much","example_range_min":0,"example_range_max":50,"kind":"Members","default_value":"2","size":4,"raw_type":"int","type":"int","name":"tree_extra_y"},{"offset":40,"comment":"filename of the png that will get loaded as the tree. The filename can have the $[1-4] notation in it","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"","size":24,"raw_type":"std::string","type":"std::string","name":"tree_image_file"},{"offset":64,"comment":"this will be used if is_visual=1, if it's not set then we will use tree_image_file","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"","size":24,"raw_type":"std::string","type":"std::string","name":"tree_image_visual"},{"offset":88,"comment":"material that the tree is made out of, or is_visual=1 then it's material that the seed is made out of","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"wood","size":24,"raw_type":"std::string","type":"std::string","name":"tree_material"},{"offset":112,"comment":"is_visual must be true! IF SET will load this entity at the x - visual_offset_x, y - visual_offset_y, (why _minus_ visual_offset_x? Because that's how the offsets work for visual vegetation sprites loaded through this, so that it is at least somewhat consistent) ","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"","size":24,"raw_type":"std::string","type":"std::string","name":"load_this_xml_instead"},{"offset":136,"comment":"is_visual=1, will set the centerpoint (SetCenterOffset) of the image to this","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"0","size":4,"raw_type":"float","type":"float","name":"visual_offset_x"},{"offset":140,"comment":"is_visual=1, will set the centerpoint (SetCenterOffset) of the image to this","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"0","size":4,"raw_type":"float","type":"float","name":"visual_offset_y"},{"offset":144,"comment":"is_visual=1, the color of the single cell that is created for the plant","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"0xFFFFFF","size":24,"raw_type":"std::string","type":"std::string","name":"visual_color"},{"offset":168,"comment":"is_grass=1, and this is set, then will check that there is a pixel to down left and down right (so it doesn't leak down).","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"grass_requires_neighbors"},{"offset":172,"comment":"Creates this only on top of this material, if empty then anything goes","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"","size":24,"raw_type":"std::string","type":"std::string","name":"material_on_top_of"},{"offset":196,"comment":"if != 0 will check that there is air up to this height","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"0","size":4,"raw_type":"int","type":"int","name":"height_check"},{"offset":200,"comment":"this is the max y that the plant / tree can be placed","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"99999","size":4,"raw_type":"int","type":"int","name":"max_y"},{"offset":204,"comment":"if true, has 50% chance of being flipped horizontally","example_range_min":0,"example_range_max":1,"kind":"Members","default_value":"false","size":1,"raw_type":"bool","type":"bool","name":"random_flip_x_scale"},{"offset":208,"comment":"","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"0","size":4,"raw_type":"uint32","type":"std::uint32_t","name":"mVisualColor"},{"offset":212,"comment":"","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"-1","size":4,"raw_type":"int","type":"int","name":"tree_material_id"},{"offset":216,"comment":"","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"-1","size":4,"raw_type":"int","type":"int","name":"material_id_on_top_of"},{"offset":220,"comment":"","example_range_min":0,"example_range_max":1,"kind":"Privates","default_value":"","size":4,"raw_type":"const ceng::CArray2D< uint32 >*","type":"const ceng::CArray2D< uint32 >*","name":"mTreeData"}]}