<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net7.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>

  <!-- Don't have TIME_STATS in publish builds -->
  <PropertyGroup Condition="'$(PublishProtocol)'==''">
    <DefineConstants>$(DefineConstants);TIME_STATS</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="CommunityToolkit.HighPerformance" Version="8.2.1" />
    <PackageReference Include="ImGui.NET" Version="1.89.7.1" />
    <PackageReference Include="Silk.NET.Input.Glfw" Version="2.17.1" />
    <PackageReference Include="Silk.NET.Windowing.Extensions.Veldrid" Version="2.17.1" />
    <PackageReference Include="Silk.NET.Windowing.Glfw" Version="2.17.1" />
    <PackageReference Include="SixLabors.ImageSharp" Version="3.0.1" />
    <PackageReference Include="Veldrid" Version="4.9.0" />
    <PackageReference Include="Veldrid.ImGui" Version="5.72.0" />
    <PackageReference Include="Veldrid.RenderDoc" Version="1.0.1" />
    <PackageReference Include="Veldrid.SPIRV" Version="1.0.15" />
  </ItemGroup>

  <ItemGroup>
    <None Include="$(ProjectDir)Assets\**" CopyToOutputDirectory="PreserveNewest" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="Assets\Shaders\Compiled\" />
  </ItemGroup>

  <UsingTask TaskName="CompileShaderTask" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <ShaderFile ParameterType="System.String" Required="true" />
      <ShaderProfile ParameterType="System.String" Required="true" />
      <ShaderEntryPoint ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Diagnostics" />
      <Using Namespace="System.Runtime.InteropServices" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          bool windows = RuntimeInformation.IsOSPlatform(OSPlatform.Windows);
          bool linux = RuntimeInformation.IsOSPlatform(OSPlatform.Linux);
          if ((!windows && !linux) || !Environment.Is64BitOperatingSystem)
              return Success; // just skips the task

          Log.LogMessage(MessageImportance.High, "Compiling Shader " + ShaderFile);

          string projectDirectory = Path.GetDirectoryName(BuildEngine.ProjectFileOfTaskNode);

          string shaderSourcePathNoExtension = Path.Combine(projectDirectory, "Assets", "Shaders", "Source", ShaderFile);
          string shaderCompilationDir = Path.Combine(projectDirectory, "Assets", "Shaders", "Compiled");
          string shaderCompilationPathNoExtension = Path.Combine(shaderCompilationDir, ShaderFile);

          Directory.CreateDirectory(shaderCompilationDir);

          if (linux) // dxc can't find its libraries otherwise
              Environment.SetEnvironmentVariable("LD_LIBRARY_PATH", Path.Combine(projectDirectory, "dxc"));

          Process process = new Process();
          process.StartInfo.FileName = Path.Combine(projectDirectory, "dxc", windows ? "dxc.exe" : "dxc");
          process.StartInfo.Arguments = string.Format("-spirv -fvk-s-shift 1 0 -fvk-b-shift 2 0 -T {0} -E {1} \"{2}.hlsl\" -Fo \"{3}.spirv\"", ShaderProfile, ShaderEntryPoint, shaderSourcePathNoExtension, shaderCompilationPathNoExtension);
          process.StartInfo.CreateNoWindow = true;
          process.StartInfo.UseShellExecute = false;
          process.StartInfo.RedirectStandardOutput = true;
          process.StartInfo.RedirectStandardError = true;
          process.Start();
          process.WaitForExit();

          string standardOutput = process.StandardOutput.ReadToEnd();

          if (!string.IsNullOrWhiteSpace(standardOutput))
          {
              Log.LogMessage(MessageImportance.High, standardOutput);
          }

          if (process.ExitCode != 0)
          {
              string message = "Failed to compile shader \"" + ShaderFile + ".hlsl\"";
              Log.LogError(message);
              Log.LogError(process.StandardError.ReadToEnd());
              return false;
          }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="CompileShaders" BeforeTargets="PreBuildEvent">
    <CompileShaderTask ShaderFile="VertexShader" ShaderProfile="vs_6_0" ShaderEntryPoint="VSMain" />
    <CompileShaderTask ShaderFile="PixelShader" ShaderProfile="ps_6_0" ShaderEntryPoint="PSMain" />
  </Target>

</Project>
